DROP DATABASE IF EXISTS Docktrack;
CREATE DATABASE IF NOT EXISTS Docktrack;
USE Docktrack;

-- Tabla Paciente
CREATE TABLE Paciente (
    id_paciente INT AUTO_INCREMENT PRIMARY KEY,
    CURP VARCHAR(18) NOT NULL,
    nombre VARCHAR(50) NOT NULL,
    ap_paterno VARCHAR(50) NOT NULL,
    ap_materno VARCHAR(50) NOT NULL,
    fecha_nacimiento DATE NOT NULL,
    contraseña VARCHAR(255) NOT NULL, -- Aumentado para hash bcrypt
    telefono VARCHAR(10) NOT NULL,
    correo VARCHAR(225) NOT NULL UNIQUE -- Evita correos duplicados
);

-- Tabla Doctor
CREATE TABLE Doctor (
    id_doctor INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL,
    ap_paterno VARCHAR(50) NOT NULL,
    ap_materno VARCHAR(50) NOT NULL,
    especialidad VARCHAR(50) NOT NULL,
    contraseña VARCHAR(255) NOT NULL, -- Aumentado para hash bcrypt
    correo VARCHAR(225) NOT NULL UNIQUE -- Evita correos duplicados
);

-- Tabla Tratamiento
CREATE TABLE Tratamiento (
    id_tratamiento INT AUTO_INCREMENT PRIMARY KEY,
    cantidad_hora VARCHAR(255) NOT NULL,
    medicamento VARCHAR(225) NOT NULL
);

-- Tabla Cita
CREATE TABLE Cita (
    id_cita INT AUTO_INCREMENT PRIMARY KEY,
    fecha DATE NOT NULL,
    hora TIME NOT NULL,
    motivo VARCHAR(500) NOT NULL
);

-- Tabla Nota
CREATE TABLE Nota (
    id_paciente INT NOT NULL,
    id_doctor INT NOT NULL,
    Nota VARCHAR(500) NOT NULL,
    PRIMARY KEY (id_paciente, id_doctor),
    FOREIGN KEY (id_paciente) REFERENCES Paciente(id_paciente),
    FOREIGN KEY (id_doctor) REFERENCES Doctor(id_doctor)
);

-- Tabla Paciente_Tratamiento
CREATE TABLE Paciente_tratamiento (
    id_paciente INT NOT NULL,
    id_tratamiento INT NOT NULL,
    PRIMARY KEY (id_paciente, id_tratamiento),
    FOREIGN KEY (id_paciente) REFERENCES Paciente(id_paciente),
    FOREIGN KEY (id_tratamiento) REFERENCES Tratamiento(id_tratamiento)
);

-- Tabla Doctor_Tratamiento
CREATE TABLE Doctor_tratamiento (
    id_doctor INT NOT NULL,
    id_tratamiento INT NOT NULL,
    PRIMARY KEY (id_doctor, id_tratamiento),
    FOREIGN KEY (id_doctor) REFERENCES Doctor(id_doctor),
    FOREIGN KEY (id_tratamiento) REFERENCES Tratamiento(id_tratamiento)
);

-- Tabla Tratamientos Completados
CREATE TABLE TratamientosCompletados (
    id_completado INT AUTO_INCREMENT PRIMARY KEY,
    id_tratamiento INT NOT NULL,
    id_paciente INT NOT NULL,
    id_doctor INT NOT NULL,
    medicamento VARCHAR(225) NOT NULL,
    cantidad_hora INT NOT NULL,
    fecha_completado TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_tratamiento) REFERENCES Tratamiento(id_tratamiento),
    FOREIGN KEY (id_paciente) REFERENCES Paciente(id_paciente),
    FOREIGN KEY (id_doctor) REFERENCES Doctor(id_doctor)
);

-- Tabla Paciente_Cita
CREATE TABLE Paciente_cita (
    id_paciente INT NOT NULL,
    id_cita INT NOT NULL,
    PRIMARY KEY (id_paciente, id_cita),
    FOREIGN KEY (id_paciente) REFERENCES Paciente(id_paciente),
    FOREIGN KEY (id_cita) REFERENCES Cita(id_cita)
);

-- Tabla Doctor_Cita
CREATE TABLE Doctor_cita (
    id_doctor INT NOT NULL,
    id_cita INT NOT NULL,
    PRIMARY KEY (id_doctor, id_cita),
    FOREIGN KEY (id_doctor) REFERENCES Doctor(id_doctor),
    FOREIGN KEY (id_cita) REFERENCES Cita(id_cita)
);

-- Verificar contenido
SELECT * FROM Paciente;
SELECT * FROM Doctor;
DESCRIBE Doctor;
ALTER TABLE TratamientosCompletados MODIFY cantidad_hora VARCHAR(255) NOT NULL;
INSERT INTO TratamientosCompletados (id_tratamiento, id_paciente, id_doctor, medicamento, cantidad_hora)
SELECT pt.id_tratamiento, pt.id_paciente, dt.id_doctor, t.medicamento, CAST(t.cantidad_hora AS SIGNED)
FROM Paciente_tratamiento pt
JOIN Tratamiento t ON pt.id_tratamiento = t.id_tratamiento
JOIN Doctor_tratamiento dt ON t.id_tratamiento = dt.id_tratamiento
WHERE pt.id_tratamiento = 1;
